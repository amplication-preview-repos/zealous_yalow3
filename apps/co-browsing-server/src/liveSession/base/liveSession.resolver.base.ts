/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LiveSession } from "./LiveSession";
import { LiveSessionCountArgs } from "./LiveSessionCountArgs";
import { LiveSessionFindManyArgs } from "./LiveSessionFindManyArgs";
import { LiveSessionFindUniqueArgs } from "./LiveSessionFindUniqueArgs";
import { CreateLiveSessionArgs } from "./CreateLiveSessionArgs";
import { UpdateLiveSessionArgs } from "./UpdateLiveSessionArgs";
import { DeleteLiveSessionArgs } from "./DeleteLiveSessionArgs";
import { LiveSessionService } from "../liveSession.service";
@graphql.Resolver(() => LiveSession)
export class LiveSessionResolverBase {
  constructor(protected readonly service: LiveSessionService) {}

  async _liveSessionsMeta(
    @graphql.Args() args: LiveSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LiveSession])
  async liveSessions(
    @graphql.Args() args: LiveSessionFindManyArgs
  ): Promise<LiveSession[]> {
    return this.service.liveSessions(args);
  }

  @graphql.Query(() => LiveSession, { nullable: true })
  async liveSession(
    @graphql.Args() args: LiveSessionFindUniqueArgs
  ): Promise<LiveSession | null> {
    const result = await this.service.liveSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LiveSession)
  async createLiveSession(
    @graphql.Args() args: CreateLiveSessionArgs
  ): Promise<LiveSession> {
    return await this.service.createLiveSession({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LiveSession)
  async updateLiveSession(
    @graphql.Args() args: UpdateLiveSessionArgs
  ): Promise<LiveSession | null> {
    try {
      return await this.service.updateLiveSession({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LiveSession)
  async deleteLiveSession(
    @graphql.Args() args: DeleteLiveSessionArgs
  ): Promise<LiveSession | null> {
    try {
      return await this.service.deleteLiveSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
