/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LiveSessionService } from "../liveSession.service";
import { LiveSessionCreateInput } from "./LiveSessionCreateInput";
import { LiveSession } from "./LiveSession";
import { LiveSessionFindManyArgs } from "./LiveSessionFindManyArgs";
import { LiveSessionWhereUniqueInput } from "./LiveSessionWhereUniqueInput";
import { LiveSessionUpdateInput } from "./LiveSessionUpdateInput";

export class LiveSessionControllerBase {
  constructor(protected readonly service: LiveSessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LiveSession })
  async createLiveSession(
    @common.Body() data: LiveSessionCreateInput
  ): Promise<LiveSession> {
    return await this.service.createLiveSession({
      data: data,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        liveSessionId: true,
        startTime: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LiveSession] })
  @ApiNestedQuery(LiveSessionFindManyArgs)
  async liveSessions(@common.Req() request: Request): Promise<LiveSession[]> {
    const args = plainToClass(LiveSessionFindManyArgs, request.query);
    return this.service.liveSessions({
      ...args,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        liveSessionId: true,
        startTime: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LiveSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async liveSession(
    @common.Param() params: LiveSessionWhereUniqueInput
  ): Promise<LiveSession | null> {
    const result = await this.service.liveSession({
      where: params,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        liveSessionId: true,
        startTime: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LiveSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLiveSession(
    @common.Param() params: LiveSessionWhereUniqueInput,
    @common.Body() data: LiveSessionUpdateInput
  ): Promise<LiveSession | null> {
    try {
      return await this.service.updateLiveSession({
        where: params,
        data: data,
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          liveSessionId: true,
          startTime: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LiveSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLiveSession(
    @common.Param() params: LiveSessionWhereUniqueInput
  ): Promise<LiveSession | null> {
    try {
      return await this.service.deleteLiveSession({
        where: params,
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          liveSessionId: true,
          startTime: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
