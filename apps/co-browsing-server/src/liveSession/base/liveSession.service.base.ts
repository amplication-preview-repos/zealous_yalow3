/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LiveSession as PrismaLiveSession } from "@prisma/client";

export class LiveSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LiveSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.liveSession.count(args);
  }

  async liveSessions<T extends Prisma.LiveSessionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveSessionFindManyArgs>
  ): Promise<PrismaLiveSession[]> {
    return this.prisma.liveSession.findMany<Prisma.LiveSessionFindManyArgs>(
      args
    );
  }
  async liveSession<T extends Prisma.LiveSessionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveSessionFindUniqueArgs>
  ): Promise<PrismaLiveSession | null> {
    return this.prisma.liveSession.findUnique(args);
  }
  async createLiveSession<T extends Prisma.LiveSessionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveSessionCreateArgs>
  ): Promise<PrismaLiveSession> {
    return this.prisma.liveSession.create<T>(args);
  }
  async updateLiveSession<T extends Prisma.LiveSessionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveSessionUpdateArgs>
  ): Promise<PrismaLiveSession> {
    return this.prisma.liveSession.update<T>(args);
  }
  async deleteLiveSession<T extends Prisma.LiveSessionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveSessionDeleteArgs>
  ): Promise<PrismaLiveSession> {
    return this.prisma.liveSession.delete(args);
  }
}
