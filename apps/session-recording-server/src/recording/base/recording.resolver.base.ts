/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Recording } from "./Recording";
import { RecordingCountArgs } from "./RecordingCountArgs";
import { RecordingFindManyArgs } from "./RecordingFindManyArgs";
import { RecordingFindUniqueArgs } from "./RecordingFindUniqueArgs";
import { CreateRecordingArgs } from "./CreateRecordingArgs";
import { UpdateRecordingArgs } from "./UpdateRecordingArgs";
import { DeleteRecordingArgs } from "./DeleteRecordingArgs";
import { Session } from "../../session/base/Session";
import { RecordingService } from "../recording.service";
@graphql.Resolver(() => Recording)
export class RecordingResolverBase {
  constructor(protected readonly service: RecordingService) {}

  async _recordingsMeta(
    @graphql.Args() args: RecordingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Recording])
  async recordings(
    @graphql.Args() args: RecordingFindManyArgs
  ): Promise<Recording[]> {
    return this.service.recordings(args);
  }

  @graphql.Query(() => Recording, { nullable: true })
  async recording(
    @graphql.Args() args: RecordingFindUniqueArgs
  ): Promise<Recording | null> {
    const result = await this.service.recording(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Recording)
  async createRecording(
    @graphql.Args() args: CreateRecordingArgs
  ): Promise<Recording> {
    return await this.service.createRecording({
      ...args,
      data: {
        ...args.data,

        session: args.data.session
          ? {
              connect: args.data.session,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Recording)
  async updateRecording(
    @graphql.Args() args: UpdateRecordingArgs
  ): Promise<Recording | null> {
    try {
      return await this.service.updateRecording({
        ...args,
        data: {
          ...args.data,

          session: args.data.session
            ? {
                connect: args.data.session,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Recording)
  async deleteRecording(
    @graphql.Args() args: DeleteRecordingArgs
  ): Promise<Recording | null> {
    try {
      return await this.service.deleteRecording(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Session, {
    nullable: true,
    name: "session",
  })
  async getSession(
    @graphql.Parent() parent: Recording
  ): Promise<Session | null> {
    const result = await this.service.getSession(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
