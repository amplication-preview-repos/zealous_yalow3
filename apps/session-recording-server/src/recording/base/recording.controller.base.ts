/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecordingService } from "../recording.service";
import { RecordingCreateInput } from "./RecordingCreateInput";
import { Recording } from "./Recording";
import { RecordingFindManyArgs } from "./RecordingFindManyArgs";
import { RecordingWhereUniqueInput } from "./RecordingWhereUniqueInput";
import { RecordingUpdateInput } from "./RecordingUpdateInput";

export class RecordingControllerBase {
  constructor(protected readonly service: RecordingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Recording })
  async createRecording(
    @common.Body() data: RecordingCreateInput
  ): Promise<Recording> {
    return await this.service.createRecording({
      data: {
        ...data,

        session: data.session
          ? {
              connect: data.session,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        maskedFields: true,
        recordingId: true,

        session: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Recording] })
  @ApiNestedQuery(RecordingFindManyArgs)
  async recordings(@common.Req() request: Request): Promise<Recording[]> {
    const args = plainToClass(RecordingFindManyArgs, request.query);
    return this.service.recordings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        maskedFields: true,
        recordingId: true,

        session: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Recording })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recording(
    @common.Param() params: RecordingWhereUniqueInput
  ): Promise<Recording | null> {
    const result = await this.service.recording({
      where: params,
      select: {
        createdAt: true,
        id: true,
        maskedFields: true,
        recordingId: true,

        session: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Recording })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecording(
    @common.Param() params: RecordingWhereUniqueInput,
    @common.Body() data: RecordingUpdateInput
  ): Promise<Recording | null> {
    try {
      return await this.service.updateRecording({
        where: params,
        data: {
          ...data,

          session: data.session
            ? {
                connect: data.session,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          maskedFields: true,
          recordingId: true,

          session: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Recording })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecording(
    @common.Param() params: RecordingWhereUniqueInput
  ): Promise<Recording | null> {
    try {
      return await this.service.deleteRecording({
        where: params,
        select: {
          createdAt: true,
          id: true,
          maskedFields: true,
          recordingId: true,

          session: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
