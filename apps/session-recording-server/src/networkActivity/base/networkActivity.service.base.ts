/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NetworkActivity as PrismaNetworkActivity,
  Session as PrismaSession,
} from "@prisma/client";

export class NetworkActivityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NetworkActivityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.networkActivity.count(args);
  }

  async networkActivities<T extends Prisma.NetworkActivityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkActivityFindManyArgs>
  ): Promise<PrismaNetworkActivity[]> {
    return this.prisma.networkActivity.findMany<Prisma.NetworkActivityFindManyArgs>(
      args
    );
  }
  async networkActivity<T extends Prisma.NetworkActivityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkActivityFindUniqueArgs>
  ): Promise<PrismaNetworkActivity | null> {
    return this.prisma.networkActivity.findUnique(args);
  }
  async createNetworkActivity<T extends Prisma.NetworkActivityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkActivityCreateArgs>
  ): Promise<PrismaNetworkActivity> {
    return this.prisma.networkActivity.create<T>(args);
  }
  async updateNetworkActivity<T extends Prisma.NetworkActivityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkActivityUpdateArgs>
  ): Promise<PrismaNetworkActivity> {
    return this.prisma.networkActivity.update<T>(args);
  }
  async deleteNetworkActivity<T extends Prisma.NetworkActivityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkActivityDeleteArgs>
  ): Promise<PrismaNetworkActivity> {
    return this.prisma.networkActivity.delete(args);
  }

  async getSession(parentId: string): Promise<PrismaSession | null> {
    return this.prisma.networkActivity
      .findUnique({
        where: { id: parentId },
      })
      .session();
  }
}
