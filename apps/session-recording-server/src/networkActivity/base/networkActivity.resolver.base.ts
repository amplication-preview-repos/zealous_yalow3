/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NetworkActivity } from "./NetworkActivity";
import { NetworkActivityCountArgs } from "./NetworkActivityCountArgs";
import { NetworkActivityFindManyArgs } from "./NetworkActivityFindManyArgs";
import { NetworkActivityFindUniqueArgs } from "./NetworkActivityFindUniqueArgs";
import { CreateNetworkActivityArgs } from "./CreateNetworkActivityArgs";
import { UpdateNetworkActivityArgs } from "./UpdateNetworkActivityArgs";
import { DeleteNetworkActivityArgs } from "./DeleteNetworkActivityArgs";
import { Session } from "../../session/base/Session";
import { NetworkActivityService } from "../networkActivity.service";
@graphql.Resolver(() => NetworkActivity)
export class NetworkActivityResolverBase {
  constructor(protected readonly service: NetworkActivityService) {}

  async _networkActivitiesMeta(
    @graphql.Args() args: NetworkActivityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NetworkActivity])
  async networkActivities(
    @graphql.Args() args: NetworkActivityFindManyArgs
  ): Promise<NetworkActivity[]> {
    return this.service.networkActivities(args);
  }

  @graphql.Query(() => NetworkActivity, { nullable: true })
  async networkActivity(
    @graphql.Args() args: NetworkActivityFindUniqueArgs
  ): Promise<NetworkActivity | null> {
    const result = await this.service.networkActivity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NetworkActivity)
  async createNetworkActivity(
    @graphql.Args() args: CreateNetworkActivityArgs
  ): Promise<NetworkActivity> {
    return await this.service.createNetworkActivity({
      ...args,
      data: {
        ...args.data,

        session: args.data.session
          ? {
              connect: args.data.session,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => NetworkActivity)
  async updateNetworkActivity(
    @graphql.Args() args: UpdateNetworkActivityArgs
  ): Promise<NetworkActivity | null> {
    try {
      return await this.service.updateNetworkActivity({
        ...args,
        data: {
          ...args.data,

          session: args.data.session
            ? {
                connect: args.data.session,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NetworkActivity)
  async deleteNetworkActivity(
    @graphql.Args() args: DeleteNetworkActivityArgs
  ): Promise<NetworkActivity | null> {
    try {
      return await this.service.deleteNetworkActivity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Session, {
    nullable: true,
    name: "session",
  })
  async getSession(
    @graphql.Parent() parent: NetworkActivity
  ): Promise<Session | null> {
    const result = await this.service.getSession(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
