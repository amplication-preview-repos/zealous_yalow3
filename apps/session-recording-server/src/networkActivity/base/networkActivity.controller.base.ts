/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NetworkActivityService } from "../networkActivity.service";
import { NetworkActivityCreateInput } from "./NetworkActivityCreateInput";
import { NetworkActivity } from "./NetworkActivity";
import { NetworkActivityFindManyArgs } from "./NetworkActivityFindManyArgs";
import { NetworkActivityWhereUniqueInput } from "./NetworkActivityWhereUniqueInput";
import { NetworkActivityUpdateInput } from "./NetworkActivityUpdateInput";

export class NetworkActivityControllerBase {
  constructor(protected readonly service: NetworkActivityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NetworkActivity })
  async createNetworkActivity(
    @common.Body() data: NetworkActivityCreateInput
  ): Promise<NetworkActivity> {
    return await this.service.createNetworkActivity({
      data: {
        ...data,

        session: data.session
          ? {
              connect: data.session,
            }
          : undefined,
      },
      select: {
        activityData: true,
        activityId: true,
        createdAt: true,
        id: true,

        session: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NetworkActivity] })
  @ApiNestedQuery(NetworkActivityFindManyArgs)
  async networkActivities(
    @common.Req() request: Request
  ): Promise<NetworkActivity[]> {
    const args = plainToClass(NetworkActivityFindManyArgs, request.query);
    return this.service.networkActivities({
      ...args,
      select: {
        activityData: true,
        activityId: true,
        createdAt: true,
        id: true,

        session: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NetworkActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async networkActivity(
    @common.Param() params: NetworkActivityWhereUniqueInput
  ): Promise<NetworkActivity | null> {
    const result = await this.service.networkActivity({
      where: params,
      select: {
        activityData: true,
        activityId: true,
        createdAt: true,
        id: true,

        session: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NetworkActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNetworkActivity(
    @common.Param() params: NetworkActivityWhereUniqueInput,
    @common.Body() data: NetworkActivityUpdateInput
  ): Promise<NetworkActivity | null> {
    try {
      return await this.service.updateNetworkActivity({
        where: params,
        data: {
          ...data,

          session: data.session
            ? {
                connect: data.session,
              }
            : undefined,
        },
        select: {
          activityData: true,
          activityId: true,
          createdAt: true,
          id: true,

          session: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NetworkActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNetworkActivity(
    @common.Param() params: NetworkActivityWhereUniqueInput
  ): Promise<NetworkActivity | null> {
    try {
      return await this.service.deleteNetworkActivity({
        where: params,
        select: {
          activityData: true,
          activityId: true,
          createdAt: true,
          id: true,

          session: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
