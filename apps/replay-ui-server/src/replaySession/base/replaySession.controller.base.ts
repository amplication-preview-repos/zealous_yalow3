/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReplaySessionService } from "../replaySession.service";
import { ReplaySessionCreateInput } from "./ReplaySessionCreateInput";
import { ReplaySession } from "./ReplaySession";
import { ReplaySessionFindManyArgs } from "./ReplaySessionFindManyArgs";
import { ReplaySessionWhereUniqueInput } from "./ReplaySessionWhereUniqueInput";
import { ReplaySessionUpdateInput } from "./ReplaySessionUpdateInput";

export class ReplaySessionControllerBase {
  constructor(protected readonly service: ReplaySessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReplaySession })
  async createReplaySession(
    @common.Body() data: ReplaySessionCreateInput
  ): Promise<ReplaySession> {
    return await this.service.createReplaySession({
      data: data,
      select: {
        createdAt: true,
        errorBars: true,
        id: true,
        replaySessionId: true,
        session: true,
        tabSwitchBars: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReplaySession] })
  @ApiNestedQuery(ReplaySessionFindManyArgs)
  async replaySessions(
    @common.Req() request: Request
  ): Promise<ReplaySession[]> {
    const args = plainToClass(ReplaySessionFindManyArgs, request.query);
    return this.service.replaySessions({
      ...args,
      select: {
        createdAt: true,
        errorBars: true,
        id: true,
        replaySessionId: true,
        session: true,
        tabSwitchBars: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReplaySession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async replaySession(
    @common.Param() params: ReplaySessionWhereUniqueInput
  ): Promise<ReplaySession | null> {
    const result = await this.service.replaySession({
      where: params,
      select: {
        createdAt: true,
        errorBars: true,
        id: true,
        replaySessionId: true,
        session: true,
        tabSwitchBars: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReplaySession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReplaySession(
    @common.Param() params: ReplaySessionWhereUniqueInput,
    @common.Body() data: ReplaySessionUpdateInput
  ): Promise<ReplaySession | null> {
    try {
      return await this.service.updateReplaySession({
        where: params,
        data: data,
        select: {
          createdAt: true,
          errorBars: true,
          id: true,
          replaySessionId: true,
          session: true,
          tabSwitchBars: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReplaySession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReplaySession(
    @common.Param() params: ReplaySessionWhereUniqueInput
  ): Promise<ReplaySession | null> {
    try {
      return await this.service.deleteReplaySession({
        where: params,
        select: {
          createdAt: true,
          errorBars: true,
          id: true,
          replaySessionId: true,
          session: true,
          tabSwitchBars: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
