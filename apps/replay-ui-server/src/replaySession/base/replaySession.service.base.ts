/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ReplaySession as PrismaReplaySession } from "@prisma/client";

export class ReplaySessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReplaySessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.replaySession.count(args);
  }

  async replaySessions<T extends Prisma.ReplaySessionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReplaySessionFindManyArgs>
  ): Promise<PrismaReplaySession[]> {
    return this.prisma.replaySession.findMany<Prisma.ReplaySessionFindManyArgs>(
      args
    );
  }
  async replaySession<T extends Prisma.ReplaySessionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReplaySessionFindUniqueArgs>
  ): Promise<PrismaReplaySession | null> {
    return this.prisma.replaySession.findUnique(args);
  }
  async createReplaySession<T extends Prisma.ReplaySessionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReplaySessionCreateArgs>
  ): Promise<PrismaReplaySession> {
    return this.prisma.replaySession.create<T>(args);
  }
  async updateReplaySession<T extends Prisma.ReplaySessionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReplaySessionUpdateArgs>
  ): Promise<PrismaReplaySession> {
    return this.prisma.replaySession.update<T>(args);
  }
  async deleteReplaySession<T extends Prisma.ReplaySessionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReplaySessionDeleteArgs>
  ): Promise<PrismaReplaySession> {
    return this.prisma.replaySession.delete(args);
  }
}
